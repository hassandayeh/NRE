// prisma/schema.prisma
// Base: Orgs, Users, Roles (slots 1..10), Bookings, Modes & Access (additive-only)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * =========================
 * Enums (existing)
 * =========================
 */
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum AppearanceType {
  IN_PERSON
  ONLINE
  PHONE
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

/// Used by OrganizationDomain (dev-friendly domain claiming)
enum DomainStatus {
  PENDING
  VERIFIED
  REVOKED
}

/**
 * =========================
 * Enums (NEW for G-Profile V2 guest-owned)
 * =========================
 */
enum Honorific {
  DR
  PROF
  ENG
  MR
  MS
  MRS
  AMB
  GEN
  OTHER
}

enum Pronouns {
  SHE_HER
  HE_HIM
  THEY_THEM
  SELF_DESCRIBE
  PREFER_NOT
}

enum CEFRLevel {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum TravelReadiness {
  LOCAL
  REGIONAL
  GLOBAL
}

enum MediaType {
  TV
  RADIO
  ONLINE
  PRINT
  PODCAST
}

enum ContactVisibility {
  PUBLIC
  INTERNAL
  PRIVATE
}

enum ContactType {
  PHONE
  WHATSAPP
  TELEGRAM
  SIGNAL
  WECHAT
  IM
  OTHER
}

/**
 * =========================
 * Tenancy & Users
 * =========================
 */
model Organization {
  id   String @id @default(cuid())
  name String @db.VarChar(200)

  // Access control
  orgRoles  OrgRole[]
  userRoles UserRole[]

  // Modes & access (additive)
  modes         OrganizationMode[]
  modePresets   OrganizationModePreset[]
  accessPresets OrganizationAccessPreset[]

  // Domain bookings
  bookings Booking[]

  // NEW: claimed domains (DB-backed, replaces any .env usage)
  domains OrganizationDomain[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model User {
  id             String @id @default(cuid())
  email          String @unique @db.VarChar(320)
  hashedPassword String @db.VarChar(255)

  displayName String? @db.VarChar(200)
  avatarUrl   String? @db.Text
  bio         String? @db.Text

  languages String[] @default([])
  tags      String[] @default([])

  supportsOnline   Boolean @default(false)
  supportsInPerson Boolean @default(false)

  city        String? @db.VarChar(200)
  countryCode String? @db.VarChar(2)
  timeZone    String? @db.VarChar(64)

  userRoles           UserRole[]
  bookingParticipants BookingParticipant[]
  notes               BookingNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([displayName])
  @@index([countryCode])
}

/**
 * =========================
 * Access Control (Roles 1â€“10)
 * =========================
 */
model PermissionKey {
  id          String   @id @default(cuid())
  key         String   @unique @db.VarChar(120)
  description String?  @db.Text
  createdAt   DateTime @default(now())

  // NEW: claimed domains (DB-backed, replaces any .env usage)
  domains OrganizationDomain[]

  updatedAt DateTime @updatedAt

  templateLinks RoleTemplatePermission[]
  orgLinks      OrgRolePermission[]
}

model RoleTemplate {
  id                String   @id @default(cuid())
  slot              Int      @unique
  defaultLabel      String   @db.VarChar(100)
  isActiveByDefault Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  permissions RoleTemplatePermission[]
}

model RoleTemplatePermission {
  roleTemplateId  String
  permissionKeyId String

  roleTemplate  RoleTemplate  @relation(fields: [roleTemplateId], references: [id], onDelete: Cascade)
  permissionKey PermissionKey @relation(fields: [permissionKeyId], references: [id], onDelete: Cascade)

  @@id([roleTemplateId, permissionKeyId])
}

model OrgRole {
  id       String  @id @default(cuid())
  orgId    String
  slot     Int
  label    String  @db.VarChar(100)
  isActive Boolean @default(false)

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions OrgRolePermission[]
  assignments UserRole[]          @relation("OrgRoleAssignments")

  @@unique([orgId, slot])
  @@index([orgId])
}

model OrgRolePermission {
  orgRoleId       String
  permissionKeyId String
  allowed         Boolean @default(true)

  orgRole       OrgRole       @relation(fields: [orgRoleId], references: [id], onDelete: Cascade)
  permissionKey PermissionKey @relation(fields: [permissionKeyId], references: [id], onDelete: Cascade)

  @@id([orgRoleId, permissionKeyId])
}

model UserRole {
  userId     String
  orgId      String
  slot       Int
  assignedAt DateTime @default(now())
  orgManaged Boolean  @default(false)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgRole      OrgRole      @relation("OrgRoleAssignments", fields: [orgId, slot], references: [orgId, slot], onDelete: Cascade)

  @@id([userId, orgId])
  @@index([orgId, slot])
}

/**
 * =========================
 * Modes (per org) + Presets & Access (additive)
 * =========================
 */

/**
 * OrganizationMode
 * Route writes: { orgId, slot, active, label, accessFieldLabel }
 * We expose `active` but map it to the existing DB column `isActive`.
 */
model OrganizationMode {
  id               String  @id @default(cuid())
  orgId            String
  slot             Int
  label            String  @db.VarChar(120)
  active           Boolean @default(false) @map("isActive") // maps to existing column
  accessFieldLabel String?

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // *** Back-relations required by Prisma (additive, no DB changes) ***
  presets       OrganizationModePreset[]
  accessPresets OrganizationAccessPreset[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, slot])
  @@index([orgId])
}

/**
 * Catalog of access fields toggled per mode
 */
model OrganizationAccessField {
  id          String  @id @default(cuid())
  key         String  @unique @db.VarChar(120)
  label       String  @db.VarChar(200)
  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Two different relations from AccessPreset -> AccessField need names
  presetsByAccessId OrganizationAccessPreset[] @relation("AccessPresetByAccessFieldId")
  presetsByLegacyId OrganizationAccessPreset[] @relation("AccessPresetByLegacyFieldId")
}

/**
 * Mode presets (per OrganizationMode).
 * Route sends arrays like: [{ orgModeId, value }]
 * Legacy orgId/slot/label/active kept OPTIONAL (no drops).
 */
model OrganizationModePreset {
  id        String @id @default(cuid())
  orgModeId String
  value     String

  // legacy/optional (kept for compatibility)
  orgId  String?
  slot   Int?
  label  String?
  active Boolean? @default(false)

  organizationMode OrganizationMode @relation(fields: [orgModeId], references: [id], onDelete: Cascade)
  organization     Organization?    @relation(fields: [orgId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, slot]) // legacy uniqueness (null-friendly)
  @@index([orgModeId])
  @@index([orgId])
}

/**
 * Access presets (per OrganizationMode + AccessField).
 * Route sends arrays like: [{ orgModeId, accessFieldId, value }]
 * Legacy orgId/modeSlot/fieldId/allowed kept OPTIONAL (no drops).
 */
model OrganizationAccessPreset {
  id            String  @id @default(cuid())
  orgModeId     String
  accessFieldId String
  value         String?

  // legacy/optional (kept for compatibility)
  orgId    String?
  modeSlot Int?
  fieldId  String?
  allowed  Boolean? @default(true)

  organizationMode OrganizationMode @relation(fields: [orgModeId], references: [id], onDelete: Cascade)

  // *** disambiguated relations ***
  accessField OrganizationAccessField  @relation("AccessPresetByAccessFieldId", fields: [accessFieldId], references: [id], onDelete: Cascade)
  field       OrganizationAccessField? @relation("AccessPresetByLegacyFieldId", fields: [fieldId], references: [id], onDelete: SetNull)

  organization Organization? @relation(fields: [orgId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, modeSlot, fieldId]) // legacy uniqueness (null-friendly)
  @@index([orgModeId])
  @@index([accessFieldId])
  @@index([orgId])
}

/**
 * =========================
 * Bookings & Participation
 * =========================
 */
model Booking {
  id              String   @id @default(cuid())
  orgId           String
  organization    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Canonical title + rich text
  programName     String?  @db.VarChar(200)
  talkingPoints   String?  @db.Text

  status          BookingStatus @default(PENDING)
  startAt         DateTime
  durationMins    Int
  appearanceType  AppearanceType?
  locationUrl     String?
  locationName    String?  @db.VarChar(300)
  locationAddress String?
  dialInfo        String?

  /// Stores New-page access knobs (scopes/provisioning/unified type/default link)
  accessConfig    Json?

  /// Optional newsroom label shown in New page's "What" section
  newsroomName    String?

  participants    BookingParticipant[]
  notes           BookingNote[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([orgId])
  @@index([startAt])
}


model BookingParticipant {
  id        String  @id @default(cuid())
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  roleSlot          Int
  roleLabelSnapshot String? @db.VarChar(100)

  inviteStatus    InviteStatus @default(PENDING)
  invitedByUserId String?
  invitedAt       DateTime?
  respondedAt     DateTime?

  notes String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([bookingId, userId])
  @@index([bookingId])
  @@index([roleSlot])
  @@index([userId, inviteStatus])
}

model BookingNote {
  id        String  @id @default(cuid())
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  body String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId, createdAt])
}

/**
 * =========================
 * Guest Profile (expanded for G-Profile V2 guest-owned)
 * =========================
 */
model GuestProfile {
  id String @id @default(cuid())

  // Account
  personalEmail String  @unique @db.VarChar(320)
  passwordHash  String? @db.VarChar(255) // hashed password for guest sign-in

  // Core (existing)
  displayName  String?
  avatarUrl    String?
  listedPublic Boolean @default(false)
  inviteable   Boolean @default(true)

  // Identity (NEW)
  honorific  Honorific?
  nativeName String?    @db.VarChar(200)
  pronouns   Pronouns?

  // Headline & Summary (NEW)
  headline String? @db.VarChar(120)
  shortBio String? @db.VarChar(280)
  fullBio  String? @db.Text

  // Expertise & Coverage (NEW: facets as arrays for MVP)
  topicKeys   String[] @default([])
  regionCodes String[] @default([])

  // Logistics (NEW)
  countryCode     String?          @db.VarChar(2)
  city            String?          @db.VarChar(200)
  timezone        String?          @db.VarChar(64)
  appearanceTypes AppearanceType[] @default([])
  travelReadiness TravelReadiness?

  // Children (NEW)
  languages        GuestLanguage[]
  experience       GuestExperience[]
  education        GuestEducation[]
  publications     GuestPublication[]
  media            GuestMediaAppearance[]
  additionalEmails GuestAdditionalEmail[]
  contacts         GuestContactMethod[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Child tables for guest-owned fields

model GuestLanguage {
  id        String       @id @default(cuid())
  profileId String
  profile   GuestProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  isoCode String    @db.VarChar(16) // ISO-639-1 (+ room for tags)
  level   CEFRLevel

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([profileId, isoCode])
  @@index([profileId])
}

model GuestExperience {
  id        String       @id @default(cuid())
  profileId String
  profile   GuestProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  orgName   String    @db.VarChar(200)
  roleTitle String?   @db.VarChar(200)
  from      DateTime?
  to        DateTime?
  isCurrent Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId, isCurrent])
}

model GuestEducation {
  id        String       @id @default(cuid())
  profileId String
  profile   GuestProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  institution  String    @db.VarChar(200)
  credential   String?   @db.VarChar(200)
  fieldOfStudy String?   @db.VarChar(200)
  from         DateTime?
  to           DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model GuestPublication {
  id        String       @id @default(cuid())
  profileId String
  profile   GuestProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  title  String  @db.VarChar(300)
  outlet String? @db.VarChar(200)
  year   Int?
  url    String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId, year])
}

model GuestMediaAppearance {
  id        String       @id @default(cuid())
  profileId String
  profile   GuestProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  title  String     @db.VarChar(300)
  outlet String?    @db.VarChar(200)
  date   DateTime?
  url    String?    @db.Text
  type   MediaType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId, date])
}

model GuestAdditionalEmail {
  id        String       @id @default(cuid())
  profileId String
  profile   GuestProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  email      String            @db.VarChar(320)
  verifiedAt DateTime?
  visibility ContactVisibility @default(INTERNAL)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([profileId, email])
  @@index([profileId, visibility])
}

model GuestContactMethod {
  id        String       @id @default(cuid())
  profileId String
  profile   GuestProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  type       ContactType
  value      String            @db.VarChar(200)
  visibility ContactVisibility @default(INTERNAL)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId, type])
}

/**
 * =========================
 * OrganizationDomain â€” dev-friendly domain claiming (no SMTP/DNS yet)
 * =========================
 */
model OrganizationDomain {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  /// Stored lowercased by UI; length allows full email domain spec.
  domain String @db.VarChar(320)

  /// Manual for now (no verification infra yet)
  status           DomainStatus @default(VERIFIED)
  isPrimary        Boolean      @default(false)
  verifiedAt       DateTime?
  verifiedByUserId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PermissionKey   PermissionKey? @relation(fields: [permissionKeyId], references: [id])
  permissionKeyId String?

  @@unique([orgId, domain]) // unique per org
  @@index([domain])
}

/// Per-org internal notes on a guestâ€™s public profile (MVP).
/// We keep org/guest/user as strings to avoid coupling to existing relations.
model OrgGuestNote {
  id           String   @id @default(cuid())
  orgId        String // organization that owns this note
  guestId      String // the public guest profile this note is attached to
  authorUserId String // staff user id who posted the note
  authorName   String? // cached display name for convenience
  body         String // note text (markdown/plain)
  createdAt    DateTime @default(now())

  @@index([orgId, guestId, createdAt])
}
