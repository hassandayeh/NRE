// prisma/schema.prisma
// Org & Tenancy foundation + existing Booking schema retained

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Reads from DATABASE_URL in .env (PostgreSQL)
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Booking appearance mode
enum AppearanceType {
  IN_PERSON
  ONLINE
}

/// Booking workflow status
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

/// Organization/user roles for tenancy & permissions
enum Role {
  OWNER
  PRODUCER
  EXPERT
  DEV
}

/// Organizations (newsrooms or companies)
model Organization {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(200)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Feature toggles owned by this organization
  toggles OrgFeatureToggle?

  // Optional: bookings scoped to an org (wired via orgId on Booking)
  bookings Booking[]

  // Tenancy relations
  memberships OrganizationMembership[]
  // Reverse side of User.activeOrg
  activeUsers User[]                   @relation("ActiveOrg")
}

/// DB-backed feature flags per organization
/// One row per org controls conditional fields in UI
model OrgFeatureToggle {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Core toggles (can grow over time)
  showProgramName   Boolean @default(true)
  showHostName      Boolean @default(true)
  showTalkingPoints Boolean @default(true)

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId]) // one toggle row per org (acts like a settings record)
}

/// Bookings table (current UI fields; can expand later)
model Booking {
  id             String         @id @default(cuid())
  subject        String         @db.VarChar(300)
  expertName     String         @db.VarChar(200)
  newsroomName   String         @db.VarChar(200)
  appearanceType AppearanceType
  status         BookingStatus  @default(PENDING)
  startAt        DateTime
  durationMins   Int

  // Optional location fields
  locationName String? @db.VarChar(300)
  locationUrl  String? @db.Text

  // Org scope (optional for now)
  orgId        String?
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orgId])
  @@index([startAt])
}

/// Application user (for local credentials auth soon)
model User {
  id             String  @id @default(cuid())
  email          String  @unique @db.VarChar(320)
  name           String? @db.VarChar(200)
  // Store a secure hash (bcrypt/argon2) — NOT plaintext
  hashedPassword String  @db.VarChar(255)

  // Optional “active org” for scoping the UI/session
  activeOrgId String?
  activeOrg   Organization? @relation("ActiveOrg", fields: [activeOrgId], references: [id], onDelete: SetNull)

  // Tenancy
  memberships OrganizationMembership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([activeOrgId])
}

/// User ↔ Organization membership with role
model OrganizationMembership {
  id        String   @id @default(cuid())
  userId    String
  orgId     String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@index([orgId])
  @@index([userId])
}
