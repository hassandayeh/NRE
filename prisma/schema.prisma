// prisma/schema.prisma
// === Clean Base Schema (Hard Reset, slot-based roles only) ===
// - Org-scoped Roles 1–10 + permissions
// - Users, Organizations
// - Bookings + normalized participants (slot-based; NO named roles)
// - Minimal Notes

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * =========================
 * Enums (no role names)
 * =========================
 */

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum AppearanceType {
  IN_PERSON
  ONLINE
  PHONE
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

/**
 * =========================
 * Tenancy & Users
 * =========================
 */

model Organization {
  id   String @id @default(cuid())
  name String @db.VarChar(200)

  // Access control
  orgRoles  OrgRole[]
  userRoles UserRole[]

  // Domain
  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model User {
  id             String @id @default(cuid())
  email          String @unique @db.VarChar(320)
  hashedPassword String @db.VarChar(255)

  // Display/profile
  displayName String? @db.VarChar(200)
  avatarUrl   String? @db.Text
  bio         String? @db.Text

  // Directory/search facets
  languages        String[] @default([])
  tags             String[] @default([])
  supportsOnline   Boolean  @default(false)
  supportsInPerson Boolean  @default(false)
  city             String?  @db.VarChar(200)
  countryCode      String?  @db.VarChar(2)
  timeZone         String?  @db.VarChar(64)

  // Access
  userRoles UserRole[]

  // Participation
  bookingParticipants BookingParticipant[]
  notes               BookingNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([displayName])
  @@index([countryCode])
}

/**
 * =========================
 * Access Control (Roles 1–10)
 * =========================
 */

// Canonical permission catalog (e.g., "booking:update", "directory:listed_internal")
model PermissionKey {
  id          String   @id @default(cuid())
  key         String   @unique @db.VarChar(120)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  templateLinks RoleTemplatePermission[]
  orgLinks      OrgRolePermission[]
}

// Default slots 1..10 with default labels and permissions
model RoleTemplate {
  id                String  @id @default(cuid())
  slot              Int     @unique // 1..10
  defaultLabel      String  @db.VarChar(100)
  isActiveByDefault Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions RoleTemplatePermission[]
}

model RoleTemplatePermission {
  roleTemplateId  String
  permissionKeyId String

  roleTemplate  RoleTemplate  @relation(fields: [roleTemplateId], references: [id], onDelete: Cascade)
  permissionKey PermissionKey @relation(fields: [permissionKeyId], references: [id], onDelete: Cascade)

  @@id([roleTemplateId, permissionKeyId])
}

// Per-org instance of a slot with label + active toggle
model OrgRole {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  slot     Int
  label    String  @db.VarChar(100)
  isActive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions OrgRolePermission[]
  assignments UserRole[]          @relation("OrgRoleAssignments")

  @@unique([orgId, slot])
  @@index([orgId])
}

model OrgRolePermission {
  orgRoleId       String
  permissionKeyId String
  allowed         Boolean @default(true)

  orgRole       OrgRole       @relation(fields: [orgRoleId], references: [id], onDelete: Cascade)
  permissionKey PermissionKey @relation(fields: [permissionKeyId], references: [id], onDelete: Cascade)

  @@id([orgRoleId, permissionKeyId])
}

// Membership = role assignment (one per user per org)
model UserRole {
  userId     String
  orgId      String
  slot       Int
  assignedAt DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Composite relation to the org's chosen slot (enforces slot exists)
  orgRole OrgRole @relation("OrgRoleAssignments", fields: [orgId, slot], references: [orgId, slot], onDelete: Cascade)

  @@id([userId, orgId]) // exactly one role per user per org
  @@index([orgId, slot])
}

/**
 * =========================
 * Bookings & Participation
 * =========================
 */

model Booking {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  subject      String        @db.VarChar(300)
  status       BookingStatus @default(PENDING)
  startAt      DateTime
  durationMins Int

  // Optional shared “where” defaults
  appearanceType  AppearanceType?
  // ONLINE
  locationUrl     String?
  // IN_PERSON
  locationName    String?         @db.VarChar(300)
  locationAddress String?
  // PHONE
  dialInfo        String?

  participants BookingParticipant[]
  notes        BookingNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orgId])
  @@index([startAt])
}

model BookingParticipant {
  id        String  @id @default(cuid())
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Slot-based role (1..10). Enforce range in app/UI.
  roleSlot Int

  // Optional snapshot of the org role label at invite time (for stable UI)
  roleLabelSnapshot String? @db.VarChar(100)

  inviteStatus InviteStatus @default(PENDING)

  // Optional audit
  invitedByUserId String?
  invitedAt       DateTime?
  respondedAt     DateTime?

  // Optional per-participant context
  notes String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([bookingId, userId]) // a user appears at most once on a booking
  @@index([bookingId])
  @@index([roleSlot])
  @@index([userId, inviteStatus])
}

model BookingNote {
  id        String  @id @default(cuid())
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  body String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId, createdAt])
}

/// ========== Modes & Access (additive; safe) ==========

model OrganizationMode {
  id               String @id @default(cuid())
  orgId            String
  slot             Int
  active           Boolean @default(false)
  label            String?
  accessFieldLabel String?

  // children
  presets OrganizationModePreset[]

  // Indexes & guards
  @@unique([orgId, slot])
  @@index([orgId, active])
}

model OrganizationModePreset {
  id         String @id @default(cuid())
  orgModeId  String
  value      String

  // relation (kept scalar-safe; Prisma can infer without foreign keys in DB)
  mode OrganizationMode @relation(fields: [orgModeId], references: [id], onDelete: Cascade)

  @@index([orgModeId])
}

model OrganizationAccessField {
  id      String @id @default(cuid())
  orgId   String
  /// A short stable identifier within the org (e.g., "link", "address", "dial")
  key     String
  /// Human label shown in UI (e.g., "Link", "Address", "Dial-in number")
  label   String

  presets OrganizationAccessPreset[]

  @@unique([orgId, key])
  @@index([orgId])
}

model OrganizationAccessPreset {
  id            String @id @default(cuid())
  accessFieldId String
  value         String

  field OrganizationAccessField @relation(fields: [accessFieldId], references: [id], onDelete: Cascade)

  @@index([accessFieldId])
}
