// prisma/schema.prisma
// Tenancy foundation + Org settings + Expert exclusivity + Guests/Notes/Favorites
// + Appearance/Access scopes (guests) + Host-specific model (dual) + Search fields
// + Participants (normalized; additive step)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")   // pooled (…-pooler…)
  directUrl = env("DIRECT_URL")     // direct (no -pooler)
}


/**
 * ===== Enums =====
 */

/// Booking appearance mode (used by Booking when UNIFIED and by each BookingGuest/BookingHost)
enum AppearanceType {
  IN_PERSON
  ONLINE
  PHONE
}

/// Booking workflow status (kept minimal)
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

/// Organization/user roles for tenancy & permissions
enum Role {
  OWNER
  ADMIN
  PRODUCER
  EXPERT
  HOST
  REPORTER
}

/// Expert public visibility & exclusivity
enum ExpertStatus {
  PUBLIC
  EXCLUSIVE
}

/// Guest appearance scope at the booking level
enum AppearanceScope {
  UNIFIED
  PER_GUEST
}

/// Guest access provisioning mode at the booking level
enum AccessProvisioning {
  SHARED
  PER_GUEST
}

/// Participant kind for guests on a booking
enum ParticipantKind {
  EXPERT
  REPORTER
}

/// Host appearance scope at the booking level (dual model for hosts)
enum HostAppearanceScope {
  UNIFIED
  PER_HOST
}

/// Host access provisioning at the booking level (dual model for hosts)
enum HostAccessProvisioning {
  SHARED
  PER_HOST
}

/// NEW: Normalized participant role (covers hosts/experts/reporters/interpreters)
enum BookingParticipantRole {
  HOST
  EXPERT
  REPORTER
  INTERPRETER
}

/// NEW: Invitation lifecycle for normalized participants
enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

/**
 * ===== Core Tenancy Models =====
 */

/// Organizations (newsrooms or companies)
model Organization {
  id              String                  @id @default(cuid())
  name            String                  @db.VarChar(200)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  // Settings (one row per org)
  settings        OrgSettings?

  // Tenancy relations
  memberships     OrganizationMembership[]

  // Reverse side of User.activeOrg (legacy/optional UI context)
  activeUsers     User[]                  @relation("ActiveOrg")

  // Experts exclusively attached to this org (when exclusive)
  exclusiveExperts User[]                 @relation("ExclusiveOrg")

  // Bookings scoped to an org
  bookings        Booking[]

  // Back-relation for favorites
  favoriteLists   FavoriteList[]
}

/// DB-backed org settings (shell). Controls visibility/behaviour in UI (MVP).
model OrgSettings {
  id               String   @id @default(cuid())
  orgId            String   @unique
  organization     Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Field visibility toggles (MVP)
  showProgramName  Boolean  @default(true)
  showHostName     Boolean  @default(true)
  showTalkingPoints Boolean @default(true)

  // Appearance type allowlist (MVP)
  allowInPerson    Boolean  @default(true)
  allowOnline      Boolean  @default(true)

  // Audit
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

/// User ↔ Organization membership with role
model OrganizationMembership {
  id           String   @id @default(cuid())
  userId       String
  orgId        String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@index([orgId])
  @@index([userId])
}

/**
 * ===== App Models =====
 */

/// Application user model
model User {
  id                 String   @id @default(cuid())
  email              String   @unique @db.VarChar(320)
  name               String?  @db.VarChar(200) // legacy display; some UI still reads this
  // Store a secure hash (bcrypt/argon2) — NOT plaintext
  hashedPassword     String   @db.VarChar(255)

  // ---- Profile fields (optional) ----
  displayName        String?  @db.VarChar(200)
  avatarUrl          String?  @db.Text
  bio                String?  @db.Text

  // Searchable expert metadata
  languages          String[] @default([])
  tags               String[] @default([])
  supportsOnline     Boolean  @default(false)
  supportsInPerson   Boolean  @default(false)
  city               String?  @db.VarChar(200)
  countryCode        String?  @db.VarChar(2) // ISO-3166-1 alpha-2
  timeZone           String?  @db.VarChar(64) // e.g. "Africa/Cairo"

  // ---- Legacy UI scoping (kept to avoid breaking code) ----
  activeOrgId        String?
  activeOrg          Organization? @relation("ActiveOrg", fields: [activeOrgId], references: [id], onDelete: SetNull)

  // Tenancy memberships (kept for Owner/Producer/Host/Reporter/etc.)
  memberships        OrganizationMembership[]

  // ---- Expert visibility/exclusivity ----
  expertVisStatus    ExpertStatus? @default(PUBLIC) @map("expertStatus")
  exclusiveOrgId     String?
  exclusiveOrg       Organization? @relation("ExclusiveOrg", fields: [exclusiveOrgId], references: [id], onDelete: SetNull)

  // Back-relations
  bookingsAsExpert   Booking[] @relation("ExpertBookings")
  bookingsAsHost     Booking[] @relation("HostBookings")
  notes              BookingNote[]
  favoriteListsCreated FavoriteList[] @relation("FavoriteListCreatedBy")

  bookingGuests      BookingGuest[]
  bookingHosts       BookingHost[]

  // NEW: back-relation to normalized participants (additive)
  bookingParticipants BookingParticipant[]

  favoritedIn        FavoriteListItem[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([activeOrgId])
  @@index([name])
  @@index([countryCode])
  @@index([displayName])
}

/// Bookings table (org-scoped)
model Booking {
  id                   String   @id @default(cuid())
  subject              String   @db.VarChar(300)

  // ---- Legacy editorial fields (kept) ----
  expertName           String   @db.VarChar(200)
  newsroomName         String   @db.VarChar(200)
  talkingPoints        String?  @db.Text

  // ---- Guests: Appearance & Access (original model) ----
  appearanceScope      AppearanceScope @default(UNIFIED)
  appearanceType       AppearanceType?
  accessProvisioning   AccessProvisioning @default(SHARED)

  status               BookingStatus @default(PENDING)
  startAt              DateTime
  durationMins         Int

  // Booking defaults for GUESTS (used when UNIFIED and/or SHARED)
  // ONLINE
  locationUrl          String?  @db.Text
  // IN_PERSON
  locationName         String?  @db.VarChar(300)
  locationAddress      String?
  // PHONE
  dialInfo             String?

  // Optional editorial extras (visibility controlled by OrgSettings)
  programName          String?  @db.VarChar(200)
  hostName             String?  @db.VarChar(200)

  // Org scope
  orgId                String?
  organization         Organization? @relation(fields: [orgId], references: [id], onDelete: SetNull)

  // ---- Expert FK (legacy mirror) ----
  expertUserId         String?
  expert               User?    @relation("ExpertBookings", fields: [expertUserId], references: [id], onDelete: SetNull)

  // ---- Host FK (legacy mirror) ----
  hostUserId           String?
  host                 User?    @relation("HostBookings", fields: [hostUserId], references: [id], onDelete: SetNull)

  // ---- Hosts: Dual model (their own scope/provisioning/defaults) ----
  hostAppearanceScope  HostAppearanceScope @default(UNIFIED)
  hostAppearanceType   AppearanceType?
  hostAccessProvisioning HostAccessProvisioning @default(SHARED)

  // Host defaults (used when hostAppearanceScope=UNIFIED and hostAccessProvisioning=SHARED)
  hostLocationUrl      String?  @db.Text
  hostLocationName     String?  @db.VarChar(300)
  hostLocationAddress  String?
  hostDialInfo         String?

  // Participants & notes
  guests               BookingGuest[]
  hosts                BookingHost[]
  notes                BookingNote[]

  // NEW: normalized participants (additive; read-path wiring next)
  participants         BookingParticipant[]

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([orgId])
  @@index([startAt])
  @@index([expertUserId])
  @@index([hostUserId])
}

/// Join table for booking participants with per-guest appearance & access
model BookingGuest {
  id             String          @id @default(cuid())
  bookingId      String
  booking        Booking         @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  // Internal or external
  userId         String?
  user           User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  // External snapshot
  name           String
  kind           ParticipantKind // EXPERT | REPORTER

  // Display order
  order          Int             @default(0)

  // Per-guest appearance & access
  appearanceType AppearanceType
  // ONLINE
  joinUrl        String?
  // IN_PERSON
  venueName      String?
  venueAddress   String?
  // PHONE
  dialInfo       String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([bookingId, userId])
  @@index([bookingId, order])
  @@index([bookingId, kind])
}

/// Join table for booking hosts with per-host appearance & access (parity)
model BookingHost {
  id             String          @id @default(cuid())
  bookingId      String
  booking        Booking         @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  // Internal or external
  userId         String?
  user           User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  // External snapshot
  name           String

  // Display order
  order          Int             @default(0)

  // Per-host appearance & access
  appearanceType AppearanceType  @default(ONLINE)
  // ONLINE
  joinUrl        String?
  // IN_PERSON
  venueName      String?
  venueAddress   String?
  // PHONE
  dialInfo       String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([bookingId, userId])
  @@index([bookingId, order])
}

/// Notes attached to a booking
model BookingNote {
  id        String   @id @default(cuid())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  body      String   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId, createdAt])
}

/**
 * ===== Favorites (org-wide lists) =====
 */

model FavoriteList {
  id           String   @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name         String   @db.VarChar(200)

  createdById  String
  createdBy    User     @relation("FavoriteListCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  items        FavoriteListItem[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([orgId, name])
}

model FavoriteListItem {
  id           String   @id @default(cuid())
  listId       String
  list         FavoriteList @relation(fields: [listId], references: [id], onDelete: Cascade)

  // the favorited expert/reporter user
  targetUserId String
  targetUser   User @relation(fields: [targetUserId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([listId, targetUserId])
}

/**
 * ===== NEW: Normalized participants (additive, read-path-first) =====
 */

model BookingParticipant {
  id              String                  @id @default(cuid())

  bookingId       String
  booking         Booking                 @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  userId          String?
  user            User?                   @relation(fields: [userId], references: [id], onDelete: SetNull)

  /// HOST / EXPERT / REPORTER / INTERPRETER
  role            BookingParticipantRole

  /// Invitation lifecycle (read-path today; write-path later)
  inviteStatus    InviteStatus            @default(PENDING)

  /// Useful for the “primary” host scenario while multiple hosts exist
  isPrimaryHost   Boolean                 @default(false)

  /// Optional: who invited this participant (kept as loose FK to avoid churn)
  invitedByUserId String?
  invitedAt        DateTime?
  respondedAt      DateTime?

  /// Optional note attached to the participant/invite
  notes           String?                 @db.Text

  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@index([bookingId])
  @@index([userId, inviteStatus])
  @@unique([bookingId, userId, role])
}
